[
  {
    "objectID": "wbpip_gd_doc.html",
    "href": "wbpip_gd_doc.html",
    "title": "Group Data Documentation (wbpip)",
    "section": "",
    "text": "This document aims to describe the functions used in wbpip to calculated the poverty and inequality statistics using group data."
  },
  {
    "objectID": "wbpip_gd_doc.html#structure",
    "href": "wbpip_gd_doc.html#structure",
    "title": "Group Data Documentation (wbpip)",
    "section": "Structure",
    "text": "Structure\n\n\n\n\nflowchart TD\n    lz(select_lorenz) --> stats[pip_stats]\n    lq(pip_stats_lq) --> lz\n    lb(pip_stats_lb) --> lz  \n    form_lq(functional_form_lq) --> lq\n    derive_lq(derive_lq) --> lq\n    est_lq(estimate_lq) --> lq\n    check_val(check_curve_validity_lq) --> est_lq\n    comp_dist_lq(compute_dist_stats_lq) --> est_lq\n    polarization_lq(polarization_lq) --> comp_dist_lq\n    gini_lq(gini_lq) --> comp_dist_lq\n    value_at_lq --> polarization_lq\n    value_at_lq(value_at_lq) --> comp_dist_lq\n    mld_lq(mld_lq) --> comp_dist_lq\n    quantile_lq(quantile_lq) --> comp_dist_lq\n    derive_lq --> comp_dist_lq\n    derive_lq --> mld_lq\n    derive_lq --> polarization_lq\n    value_at_lq --> quantile_lq"
  },
  {
    "objectID": "wbpip_gd_doc.html#functions",
    "href": "wbpip_gd_doc.html#functions",
    "title": "Group Data Documentation (wbpip)",
    "section": "1 Functions",
    "text": "1 Functions\n\n1.1 pip_stats\nDescription: Compute poverty statistics for grouped data by selecting the best functional fit for the Lorenz curve (either beta or quadratic)\n\n\n\n\n\n\nIssue: Boundary conditions\n\n\n\nAt the moment, this is calculated using \\((\\mu L'(0.001) + 4,\\mu L'(0.98) - 4)\\) (Note: Not sure what is the reason of adding and subtracting 4).\n\n\n\n\n1.2 select_lorenz\nDescription: Select best Lorenz fit and adjust the returned statistics if needed.\n\n\n1.3 pip_stats_lq\nDescription: Compute poverty statistics for grouped data using the quadratic functional form of the Lorenz qurve.\n\n\n1.4 pip_stats_lb\nDescription: Compute poverty statistics for grouped data using the beta functional form of the Lorenz qurve.\n\n\n1.5 functional_form_lq\nDescription: Prepares data for regression of \\(y(1-y)\\) on \\((x^2-y)\\), \\(y(x-1)\\) and \\((x-y)\\).\nNote: The last observation of (x,y), which by construction has the value (1, 1), is excluded since the functional form for the Lorenz curve already forces it to pass through the point (1, 1).\nReferences: [1]\nRelevant equations:\nThe general Quadratic Lorenz curve form is:\n\\[ax^2 + bxy + cy^2 + dx + ey + f = 0 \\tag{1}\\]\nwhere \\(y\\) is the vector of cumulative proportion of consumption/income (L) and \\(x\\) is the cumulative proportions of population (P). Using the conditions \\(f=0\\) and \\(e = -(a+b+d+1)\\) the previous equation is rewritten in a linear form as follows (Equation 15 in Villasenor et al, 1989):\n\\[y(1-y) = a(x^2-y) + by(x-1) + d(x-y) \\tag{2}\\]\nThis function prepares data to estimate \\(a\\), \\(b\\), and \\(d\\) (Note: \\(d\\) is named \\(C\\) in wbpip).\n\n\n1.6 value_at_lq:\nDescription: Solves for the Quadratic Lorenz curves.\n\n\nShow the code\nvalue_at_lq <- function(x, A, B, C, key_values) {\n\n  # Check for NA, Inf and negative values in x\n  check_NA_Inf_values(x)\n  check_neg_values(x)\n\n  # Calculations\n  # e <- -(A + B + C + 1)\n  # m <- (B^2) - (4 * A)\n  # n <- (2 * B * e) - (4 * C)\n  temp <- (key_values$m * x^2) + (key_values$n * x) + (key_values$e^2)\n  temp[temp < 0] <- 0\n\n  # Solving the equation of the Lorenz curve\n  estle <- -0.5 * ((B * x) + key_values$e + sqrt(temp))\n\n  return(estle)\n}\n\n\nReferences: [1]\nRelevant equations:\nThis function calculates the value at the Quadratic Lorenz Curve. Solving Equation 1 for \\(y\\), and assuming \\(f=0\\) and \\(e = -(a+b+d+1)\\) the density function that better fits income distributions will be (Equation 6b in Villasenor et al, 1989):\n\\[ y= \\Bigl\\{-(bx+e) - (\\alpha x^2 + \\beta x + e^2)^\\frac{1}{2}\\Bigl\\}/2 \\tag{3}\\]\nwhere \\(\\alpha = b^2 -4a\\) and \\(\\beta = 2be - 4d\\).\n\n\n1.7 derive_lq\nDescription: returns the first derivative of the quadratic Lorenz curves with \\(c = 1\\).\n\n\nShow the code\nderive_lq <- function(x, A, B, C, key_values) {\n\n  if (is.null(key_values)) {\n    key_values <- gd_lq_key_values(A, B, C)\n    # e          <- key_values$e\n    # m          <- key_values$m\n    # n          <- key_values$n\n  }\n\n  if (anyNA(x) == TRUE) {\n    cli::cli_abort(\"`x' must be a numeric or integer vector\")\n  }\n  # note:\n  #   alpha --> m\n  #   beta  --> n\n\n  # e <- -(A + B + C + 1)\n  # m <- (B^2) - (4 * A)\n  # n <- (2 * B * e) - (4 * C) # C is called D in original paper, but C in Datt paper\n  tmp <- (key_values$m * x^2) + (key_values$n * x) + (key_values$e^2)\n  tmp[(!is.na(tmp) & tmp < 0)] <- 0 # If tmp == 0, val = Inf.\n\n  # Formula for first derivative of GQ Lorenz Curve\n  val <- -(B / 2) - ((2 * key_values$m * x + key_values$n) / (4 * sqrt(tmp)))\n\n  return(val)\n}\n\n\nReferences: [1]\nRelevant equations:\nThis function computes the first derivative of Equation 3:\n\\[-(b / 2) - (\\beta + 2 \\alpha x) / (4\\sqrt(\\alpha x^2 + \\beta x + e^2) \\tag{4}\\]\n\n\n1.8 estimate_lq\nDescription: Estimates poverty and inequality stats from Quadratic Lorenz fit\n\n\n1.9 check_curve_validity_lq\nDescription: Check validity of Lorenz Quadratic fit\nReferences: [1], [2], [3]\nRelevant equations:\nThe function tests for specific assumptions for the Lorenz Quadratic and relies on the formulas from Table 2 in Datt, G (1998) [3]. The nomenclature for some of these formulas differ from Villasenor et al (1989), so this is how they match:\n\\(m = \\alpha = b^2 -4a\\)\n\\(n = \\beta = 2be -4c\\) (\\(c=d\\) for Villasenor et al, 1989)\n\\(r = K*2\\alpha = (n^2 - 4me^2)^\\frac{1}{2}\\)\n\n\n\n\n\n\nIssue: Rename \\(r\\)\n\n\n\nAt the moment, \\(r\\) refers to \\((n^2 - 4me^2)\\) in wbpip. This is already fixed on commit 47852c in branch fix_key_values by Zander (Waiting for merge). We should maybe rename this within this function.\n\n\nThe conditions this function tests are presented in Section 4 of Datt (1998):\nNormality and Validity\n\n\\((n^2 - 4me^2)>0\\) so the square root in \\(r\\) to be positive. (Normality and validity)\n\\(e<0\\) or \\(c>0\\) so \\(L(0,y) = 0\\) and \\(L'(0^{+},y) \\geq 0\\) (Normality and validity)\n\\(a+d \\geq 0.9\\) so \\(L(1,y) = 1\\) (Validity)\n\n\n\n\n\n\n\nIssue: The inequality for \\(a+d\\)\n\n\n\nAt the moment, we still use the old validation \\(a+d \\leq 1\\). However, the Corrigendum of the original paper [2] indicates we should use \\(a+d \\geq 1\\)\n\n\nAnd so \\(L''(x,y) \\geq 0\\) for \\(x\\) within \\((0,1)\\):\n\n\\(m < 0\\) (condition on Villasenor et al., 1989)\nif \\(m > 0\\) then \\(m < n^2/4 e^2\\) and \\(n \\leq 0\\) (last condition from Datt,1998)\nif \\(m > 0\\) then \\(m < n^2/4 e^2\\) and \\(m < -n/2\\) (last condition from Datt,1998)\n\n\\(L''(x,y)\\) can be calculated using Equation 4:\n\\[ \\frac{\\beta^2 -4\\alpha e^2}{8(\\alpha x^2 + \\beta x + e^2)^\\frac{3}{2}} = \\frac{n^2 - 4me^2}{8(mx^2 +nx +e^2)^\\frac{3}{2}}=\\frac{r^2}{8(mx^2 +nx +e^2)^\\frac{3}{2}} \\]\n\n\n1.10 compute_dist_stats_lq\nDescription: Computes distributional stats from Lorenz Quadratic fit\n\n\n\n\n\n\nCheck:\n\n\n\nWhat is the difference with gd_estimate_dist_stats_lq?\n\n\n\n\n1.11 quantile_lq\nDescription: Compute quantiles from Lorenz Quandratic fit\n\n\nShow the code\nold_gd_compute_quantile_lq <- function(A, B, C, n_quantile = 10) {\n  vec <- vector(mode = \"numeric\", length = n_quantile)\n  x1 <- 1 / n_quantile\n  q <- 0L\n  lastq <- 0L\n  for (i in seq_len(n_quantile - 1)) {\n    q <- value_at_lq(x1, A, B, C)\n    v <- q - lastq\n    vec[i] <- v\n    lastq <- q\n    x1 <- x1 + 1 / n_quantile\n  }\n  vec[n_quantile] <- 1 - lastq\n\n  return(vec)\n}\n\n\nNote: This function calculates the quantiles for a Lorenz Quadratic with specific values for \\(a\\), \\(b\\) and \\(d\\).\n\n\n\n\n\n\nIssues:\n\n\n\nThe description of this function indicates that it calculates the quantiles (deciles) for the density for some specific values of \\(a\\), \\(b\\) and \\(d\\), but it calculates instead the “share” or the value between the deciles. If I understand correctly, the density is the lorenz curve and the share will refer to the deciles of the welfare vector.\nRegarding the last decile, they manually calculated it by subtracting 1 to the second-to-last decile:\nvec[n_quantile] <- 1 - value_at_lq(x[n_quantile-1], A, B, C) where n_quantile = 10\nHowever, my hypothesis is that this is related to Issue: The inequality for \\(a+d\\) above. If \\(A+C \\geq 1\\) then value_at_lq(1, A, B, C) = 1\n\n\nMy version of the code:\n\n\nShow the code\ngd_compute_quantile_lq <- function(A, B, C, n_quantile = 10) {\n\n  x   <- seq(from = 1/n_quantile, to = 1, by = 1/n_quantile)\n\n  vec <- diff(c(0,value_at_lq(x, A, B, C)))\n\n  vec[n_quantile] <- 1- value_at_lq(x[n_quantile-1], A, B, C) # Is this correct?\n\n  return(vec)\n}\n\n\n\n\n1.12 mld_lq\nDescription: Computes Mean Log Deviation from Lorenz Quadratic fit\n\n\nShow the code\nold_gd_compute_mld_lq <- function(A, B, C) {\n  x1 <- derive_lq(0.0005, A, B, C)\n  gap <- 0L\n  mld <- 0L\n  if (x1 == 0) {\n    gap <- 0.0005\n  } else {\n    mld <- suppressWarnings(log(x1) * 0.001)\n  }\n  x1 <- derive_lq(0, A, B, C)\n  for (xstep in seq(0, 0.998, 0.001)) {\n    x2 <- derive_lq(xstep + 0.001, A, B, C)\n    if ((x1 <= 0) || (x2 <= 0)) {\n      gap <- gap + 0.001\n      if (gap > 0.5) {\n        return(-1)\n      }\n    } else {\n      gap <- 0L\n      mld <- mld + (log(x1) + log(x2)) * 0.0005\n    }\n    x1 <- x2\n  }\n  return(-mld)\n}\n\n\nReferences: None\nNote: In this function, they do not describe how the function is calculated. The following is my hypothesis of what they were trying to accomplish:\nRelevant equations:\nThe mean log deviation:\n\\[-\\frac{1}{N} \\sum_{i=1}^N ln(\\frac{y_i}{\\mu})=-\\frac{1}{N} \\sum_{i=1}^N ln(\\frac{y_i}{\\frac{1}{N}\\sum_{i=1}^N y_i}) \\]\nUsing the derivation from Rohde (2008) (Equation 15.20), we know that:\n\\[L'(\\pi) = \\frac{N y_k}{\\sum_{k=1}^N y_k}\\]\nwhere \\(y_k\\) is the income accruing to the \\(k_{th}\\) individual if ordered such that \\(y_1<y_2<...<y_k\\) and \\(\\pi= \\frac{k}{j}\\). Then the mean log deviation can be rewritten as (Equation 15.21):\n\\[-\\int_0^1 ln(L'(\\pi))d\\pi= \\lim_{n \\rightarrow \\infty} -\\sum_{i=1}^{N}\\frac{1}{N}ln(\\frac{N y_k}{\\sum_{k=1}^N y_k})\\]\n\n\n\n\n\n\nIssue:\n\n\n\nMy hypothesis is that they used the last formula to calculate the Mean Log Deviation. I am still unsure why they used some rules at the lower end, more specifically why they return \\(1\\) if for the left tail of \\(y\\) we encounter negative values.\n\n\nMy version of the code:\n\n\nShow the code\ngd_compute_mld_lq <- function(A, B, C) {\n  x1 <- derive_lq(0.0005, A, B, C) # Not sure I understand this condition\n  #gap <- 0L\n  mld <- 0L\n  if (x1 == 0) { # So log is not undefined\n    #gap <- 0.0005\n  } else {\n    mld <- suppressWarnings(log(x1) * 0.001) # Needed to match test\n  }\n\n  xstep <- seq(0, 0.999, 0.001)\n  x <- derive_lq(xstep, A, B, C)\n\n  if (any(x[1:33]<=0)){ # To account for the gap and the stop parameter within the loop.\n    return(-1)\n  }else{\n    mld <- mld + fsum( (log(x[1:999])+log(x[2:1000])) *0.0005) # Not sure why add previous mld\n    return(-mld)\n  }\n\n  # x1 <- derive_lq(0, A, B, C)\n  # for (xstep in seq(0, 0.998, 0.001)) {\n  #   x2 <- derive_lq(xstep + 0.001, A, B, C)\n  #   if ((x1 <= 0) || (x2 <= 0)) {\n  #     gap <- gap + 0.001\n  #     if (gap > 0.5) {\n  #       return(-1)\n  #     }\n  #   } else {\n  #     gap <- 0L\n  #     mld <- mld + (log(x1) + log(x2)) * 0.0005\n  #   }\n  #   x1 <- x2\n  # }\n}\n\n\n\n\n1.13 gini_lq\nDescription: Compute Gini index from Lorenz Quadratic fit.\nReferences: [3]\nRelevant equations: …\n\n\n1.14 polarization_lq\nDescription: Computes polarization index from parametric Lorenz fit\nReferences: …\nRelevant equations: …"
  },
  {
    "objectID": "wbpip_gd_doc.html#references",
    "href": "wbpip_gd_doc.html#references",
    "title": "Group Data Documentation (wbpip)",
    "section": "2 References:",
    "text": "2 References:\n\nVillasenor, J., B. C. Arnold. 1989. “Elliptical Lorenz curves”. Journal of Econometrics 40 (2): 327-338.\nKrause, M. 2013. “Corrigendum to Elliptical Lorenz curves”. Journal of Econometrics 174 (1): 44.\nDatt, G. 1998. “Computational Tools For Poverty Measurement And Analysis”. FCND Discussion Paper 50. World Bank, Washington, DC.\nRohde, N. (2008). “Lorenz Curves and Generalised Entropy Inequality Measures”. In: Chotikapanich, D. (eds) Modeling Income Distributions and Lorenz Curves. Economic Studies in Equality, Social Exclusion and Well-Being, vol 5. Springer, New York, NY."
  },
  {
    "objectID": "wbpip_gd_doc.html#appendix",
    "href": "wbpip_gd_doc.html#appendix",
    "title": "Group Data Documentation (wbpip)",
    "section": "3 Appendix:",
    "text": "3 Appendix:\nFind function using the following list:\n\nSection 1.1: gd_compute_pip_stats\nSection 1.2: gd_select_lorenz\ngd_compute_pip_stats_lq\ngd_compute_pip_stats_lb\ncreate_functional_form_lq\nderive_lq\ngd_estimate_lq\ncheck_curve_validity_lq\ngd_compute_dist_stats_lq"
  }
]